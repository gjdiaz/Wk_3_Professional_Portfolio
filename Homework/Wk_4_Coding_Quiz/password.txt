<!DOCTYPE html>
<html>
<body>

<h2>JavaScript String Properties</h2>

<p>The length property returns the length of a string:</p>

<p id="demo"></p>

<script>
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
document.getElementById("demo").innerHTML = text.length;
</script>

</body>
</html>


let text.length = ["8", "9", "10", "11", "12"]

// returns a random number between min and max (both included)
function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}

// are these suitable variables?
minLength >= 8
maxLength <= 12
var alphaL = ['A',BCDEFGHIJKLMNOPQRSTUVWXYZ']
var alphaU = ['acdefghijklmnopqrstuvwxyz']
var numbers = ['0123456789']
var special = ['!@#$%^&*<>?=+']

// result invalid choices if all value options are set to "no"
if (values[0] = false)  {
}

// array name with array - can arrays be within arrays?
const values = ["alphaL", "alphaU", "numbers", "special"]



// this for password length? - got this from stackoverflow
function makePassword(length) {
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
      result += characters.charAt(Math.floor(Math.random() * 
 charactersLength));
   }
   return result;
}
console.log(makePassword(12));


// or this?
function sumAll() {
  let sum = 0;
  for (let i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }
  return sum;
}

//how do you put and/or for alll value types in an expression?
if (a && b) (a && || numbers && || special)  {
}

characters - for loop, set index to 9
----------------------------------------------
/* if (!validChoices.includes(userChoice)) {
  alert("Invalid choice");
}
    generatePassword: function ()  [
        if (this.upper) {

    ]
 
} */
// document.getElementById("length").innerHTML = text.length;



/* GIVEN I need a new, secure password
WHEN I click the button to generate a password
add event listener for button
THEN I am presented with a series of prompts for password criteria
WHEN prompted for password criteria
use prompts instead of options, write function that gather user's input, use if statement
THEN I select which criteria to include in the password
use boolean, if user answer (use dependencies as a parameter), then replace with value once answered
WHEN prompted for the length of the password
THEN I choose a length of at least 8 characters and no more than 128 characters */

// submitButton.addEventListener("click", showResponse)
// showResponse is the callback function

function validateLength () {
if (length < 8)  {
    alert ("Please select a minimum of eight characters");
}
if (length > 128)  {
    alert ("Please select fewer than 129 characters");
}
if (NaN === true)  {
    alert ("Invalid input");
}
}
/* WHEN asked for character types to include in the password
THEN I confirm whether or not to include lowercase, uppercase, numeric, and/or special characters */ 

// WHEN I answer each prompt
// THEN my input should be validated and at least one character type should be selected
// see html option tags
// WHEN all prompts are answered
// see html option tags

// THEN a password is generated that matches the selected criteria 
/*var result []  {
    if (lowercase === true)  {
        return result;
    } else {
    }
    if (uppercase === true)  {
        return result;
    } else {
    } 
    if (numbers === true)  {
        return result;
    } else {
    }
    if (specialChar === true)  {
        return result;
    } else {
    }

const random = (length = 8) => {
    // declare all characters
   var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*?+=';
   // pick characters randomly
   var str = '';
   for (let i = 0; i < length; i++)  {
       str += chars.charAt(Math.floor(Math.random() * chars.length));
   }
   return str;
}

console.log(random());

// WHEN the password is generated
password.generatePassword();
// THEN the password is either displayed in an alert or written to the page/*

